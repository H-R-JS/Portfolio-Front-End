/_
 - Verifier si input n'est pas vide, si c'est le cas alors on ne récupère pas le todo
 - Ajouter des effets d'animations
 - finir la function drag

 let dragIndexStart;

    function dragStart() {
      //console.log("dragStart");
      dragIndexStart = +this.closest("li").getAttribute("data-index") - 1;
      console.log(dragIndexStart);
    }

    function dragOver(e) {
      //console.log("dragOver");
      e.preventDefault();
    }

    function dragEnter() {
      //console.log("dragEnter");
      this.classList.add("over");
    }

    function dragLeave() {
      // console.log("dragLeave");
      this.classList.remove("over");
    }

    function dragDrop() {
      // console.log("dragDrop");
      const dragIndexEnd = +this.getAttribute("data-index") - 1;
      console.log(dragIndexEnd);
      this.classList.remove("over");
      swapItems(dragIndexStart, dragIndexEnd);
    }

    function swapItems(fromIndex, toIndex) {
      const itemOne = todos[fromIndex];
      const itemTwo = todos[toIndex];
      console.log(itemOne, itemTwo);
      console.log(todos[fromIndex]);
      todos[fromIndex] = itemTwo;
      todos[toIndex] = itemOne;
      console.log(todos);
    }

    function addEventListeners() {
      const ItemDrag = document.querySelectorAll(".to-do p");
      const ListDrag = document.querySelectorAll(".to-do");

      ItemDrag.forEach((ItemDrag) => {
        ItemDrag.addEventListener("dragstart", dragStart);
      });

      ListDrag.forEach((ListDrag) => {
        ListDrag.addEventListener("dragover", dragOver);
        ListDrag.addEventListener("drop", dragDrop);
        ListDrag.addEventListener("dragenter", dragEnter);
        ListDrag.addEventListener("dragleave", dragLeave);
      });
    }
 */


 /**export const ToDoList = () => {
  /*constructor(props) {
    super(props);
    this.state = {
      userInput: "",
      classIndex: [],
      classItem: "to-do",
      todos: [],
    };
    this.onChange = this.onChange.bind(this);
    this.trashItem = this.trashItem.bind(this);
    this.doneItem = this.doneItem.bind(this);
    this.setStateSynchrone = this.setStateSynchrone.bind(this);
    this.addStorage = this.addStorage.bind(this);
    this.getTodos = this.getTodos.bind(this);
    this.renderTodos = this.renderTodos.bind(this);
  }*/
  const [userInput, setUserInput] = useState("");
  const [classIndex, setClassIndex] = useState([]);
  const [classItem, setClassItem] = useState("to-do");
  const [todos, setTodos] = useState([]);

  function setStateSynchrone(setState, stateUpdate) {
    return new Promise((resolve) => {
      setState(stateUpdate, () => resolve());
    });
  }

  /* async onChange(e) {
    await this.setStateSynchrone({ userInput: e.target.value });
  }*/
  function onChange(e) {
    setUserInput(e.target.value);
  }

  /*async inputAdd(e) {
    e.preventDefault();
    this.addStorage(this.state.userInput);
    this.renderTodos(this.state.todos);
    await this.setStateSynchrone({
      userInput: "",
    });
  }*/

  function inputAdd(e) {
    e.preventDefault();
    addStorage(userInput);
    renderTodos(todos);
    setUserInput("");
  }
  /*inputTrash(e) {
    e.preventDefault();
    this.setState({
      userInput: "",
    });
  }*/

  function inputTrash(e) {
    e.preventDefault();
    setUserInput("");
  }

  /*async trashItem(e) {
    const parentTarget = e.target.parentNode;
    const indexTarget = e.target.parentNode.getAttribute("data-index");
    const dataElementArray = this.state.todos;
    const dataIndexArray = this.state.classIndex;
    const dataElementFilter = dataElementArray.filter(
      (i) => i !== parentTarget.innerText
    );
    const dataIndexFilter = dataIndexArray.filter((i) => i !== indexTarget);

    localStorage.setItem("todos", JSON.stringify(dataElementFilter));
    localStorage.setItem("class", JSON.stringify(dataIndexFilter));
    await this.setStateSynchrone({
      todos: dataElementFilter,
      classIndex: dataIndexFilter,
    });*/

  function trashItem(e) {
    const parentTarget = e.target.parentNode;
    const indexTarget = e.target.parentNode.getAttribute("data-index");
    const dataElementArray = todos;
    const dataIndexArray = classIndex;
    const dataElementFilter = dataElementArray.filter(
      (i) => i !== parentTarget.innerText
    );
    const dataIndexFilter = dataIndexArray.filter((i) => i !== indexTarget);

    localStorage.setItem("todos", JSON.stringify(dataElementFilter));
    localStorage.setItem("class", JSON.stringify(dataIndexFilter));

    setTodos(dataElementFilter);
    setClassIndex(dataIndexFilter);
    for (let i = 0; i < todos.length; i++) {
      let childElement = document.querySelector(".section-to-do").childNodes;
      // console.log(childElement[i].getAttribute("data-index"));
    }

    // take todos className and in sert in classIndex and localstorage
  }

  /*doneItem(e) {
    if (e.target.parentNode.className == "to-do done") {
      return null;
    } else {
      const itemElement = e.target.parentNode;
      itemElement.classList.add("done");
      const dataIndex = itemElement.getAttribute("data-index");
      this.addStorageIndex(dataIndex);
    }
  }*/

  function doneItem(e) {
    if (e.target.parentNode.className == "to-do done") {
      return null;
    } else {
      const itemElement = e.target.parentNode;
      itemElement.classList.add("done");
      const dataIndex = itemElement.getAttribute("data-index");
      addStorageIndex(dataIndex);
    }
  }

  /*async addStorage(todo) {
    let todos;
    if (localStorage.getItem("todos") === null) {
      todos = [];
    } else {
      todos = JSON.parse(localStorage.getItem("todos"));
    }
    todos.push(todo);
    localStorage.setItem("todos", JSON.stringify(todos));

    await this.setStateSynchrone({
      todos: [...this.state.todos, this.state.userInput],
    });
  }*/

  function addStorage(todo) {
    let anexTodos;
    if (localStorage.getItem("todos") === null) {
      anexTodos = [];
    } else {
      anexTodos = JSON.parse(localStorage.getItem("todos"));
    }
    anexTodos.push(todo);
    localStorage.setItem("todos", JSON.stringify(anexTodos));

    setTodos(...todos, userInput);

    console.log(todos);
  }
  /*async addStorageIndex(index) {
    let classIndex;
    if (localStorage.getItem("class") === null) {
      classIndex = [];
    } else {
      classIndex = JSON.parse(localStorage.getItem("class"));
    }
    classIndex.push(index);
    localStorage.setItem("class", JSON.stringify(classIndex));

    await this.setStateSynchrone({
      classIndex: [...this.state.classIndex, index],
    });
  }*/

  function addStorageIndex(index) {
    let anexClassIndex;
    if (localStorage.getItem("class") === null) {
      anexClassIndex = [];
    } else {
      anexClassIndex = JSON.parse(localStorage.getItem("class"));
    }
    anexClassIndex.push(index);
    localStorage.setItem("class", JSON.stringify(anexClassIndex));

    setClassIndex([...classIndex, index]);
  }

  /*async getTodos() {
    if (localStorage.getItem("todos") === null) {
      await this.setStateSynchrone({
        todos: [],
      });
    } else {
      await this.setStateSynchrone({
        todos: JSON.parse(localStorage.getItem("todos")),
      });
    }
    //localStorage.clear();
  }*/

  function getTodos() {
    if (localStorage.getItem("todos") === null) {
      setTodos([]);
    } else {
      setTodos(JSON.parse(localStorage.getItem("todos")));
    }
    //localStorage.clear();
  }

  /*async getClass() {
    if (localStorage.getItem("class") === null) {
      await this.setStateSynchrone({
        classIndex: [],
      });
    } else {
      await this.setStateSynchrone({
        classIndex: JSON.parse(localStorage.getItem("class")),
      });
    }
    //console.log(this.state.classIndex);
  }*/

  function getClass() {
    if (localStorage.getItem("class") === null) {
      setClassIndex([]);
    } else {
      setClassIndex(JSON.parse(localStorage.getItem("class")));
    }
    //console.log(this.state.classIndex);
  }

  /*renderTodos(stateTodos) {
    return stateTodos?.map((item, index) => {
      if (this.state.classIndex.includes(`${index + 1}`)) {
        return (
          <li key={index} data-index={index + 1} className="to-do done">
            <p>{item}</p>
            <img
              src={require("./ImgTodo/done.png")}
              className="done-to-do"
              onClick={this.doneItem}
            />
            <img
              src={require("./ImgTodo/trash.png")}
              onClick={this.trashItem}
              className="trash-to-do"
            />
          </li>
        );
      } else {
        return (
          <li key={index} data-index={index + 1} className="to-do">
            <p>{item}</p>
            <img
              src={require("./ImgTodo/done.png")}
              className="done-to-do"
              onClick={this.doneItem}
            />
            <img
              src={require("./ImgTodo/trash.png")}
              onClick={this.trashItem}
              className="trash-to-do"
            />
          </li>
        );
      }
    });
  }*/

  const renderTodos = (stateTodos) => {
    let todosRender = [];

    //console.log(todos);
    if (Array.isArray(stateTodos)) {
      return stateTodos?.map((item, index) => {
        if (classIndex.includes(`${index + 1}`)) {
          return (
            <li key={index} data-index={index + 1} className="to-do done">
              <p>{item}</p>
              <img
                src={require("./ImgTodo/done.png")}
                className="done-to-do"
                onClick={doneItem}
              />
              <img
                src={require("./ImgTodo/trash.png")}
                onClick={trashItem}
                className="trash-to-do"
              />
            </li>
          );
        } else {
          return (
            <li key={index} data-index={index + 1} className="to-do">
              <p>{item}</p>
              <img
                src={require("./ImgTodo/done.png")}
                className="done-to-do"
                onClick={doneItem}
              />
              <img
                src={require("./ImgTodo/trash.png")}
                onClick={trashItem}
                className="trash-to-do"
              />
            </li>
          );
        }
      });
    } else {
      return null;
    }
  };

  var arrayTodos = [];
  useEffect(() => {
    getTodos();
    getClass();
    renderTodos(todos);
    arrayTodos = [todos];
    console.log(todos);
  }, []);

  return (
    <main className="to-do-list">
      <h1>TO DO LIST</h1>
      <form className="input-container">
        <input
          type="text"
          onChange={(e) => onChange(e)}
          value={userInput}
          className="input-todo"
        />
        <FaCheck onClick={inputAdd} className="add-todo" />
        <FaTrash onClick={inputTrash} className="trash-todo" />
      </form>
      <section>
        {" "}
        <ul className="section-to-do">{renderTodos(todos)}</ul>
      </section>
    </main>
  );
};

/** todos?.map((item, index) => {
            if (classIndex.includes(`${index + 1}`)) {
              return (
                <li key={index} data-index={index + 1} className="to-do done">
                  <p>{item.userInput}</p>
                  <img
                    src={require("./ImgTodo/done.png")}
                    className="done-to-do"
                    onClick={doneItem}
                  />
                  <img
                    src={require("./ImgTodo/trash.png")}
                    onClick={trashItem}
                    className="trash-to-do"
                  />
                </li>
              );
            } else {
              return (
                <li key={index} data-index={index + 1} className="to-do">
                  <p>{item}</p>
                  <img
                    src={require("./ImgTodo/done.png")}
                    className="done-to-do"
                    onClick={doneItem}
                  />
                  <img
                    src={require("./ImgTodo/trash.png")}
                    onClick={trashItem}
                    className="trash-to-do"
                  />
                </li>
              );
            }
          })*/
          